// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/processingdatabase.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ProcessingDatabase {
  /// <summary>
  /// The processing database service, shared for scrapper, preprocessor and processor units
  /// </summary>
  public static partial class ProcessingDatabase
  {
    static readonly string __ServiceName = "ProcessingDatabase.ProcessingDatabase";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ProcessingDatabase.InsertRequest> __Marshaller_ProcessingDatabase_InsertRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ProcessingDatabase.InsertRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ProcessingDatabase.InsertResult> __Marshaller_ProcessingDatabase_InsertResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ProcessingDatabase.InsertResult.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FileExchange.FileData> __Marshaller_FileExchange_FileData = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FileExchange.FileData.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FileExchange.UploadStatus> __Marshaller_FileExchange_UploadStatus = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FileExchange.UploadStatus.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ProcessingDatabase.GetByStatusRequest> __Marshaller_ProcessingDatabase_GetByStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ProcessingDatabase.GetByStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ProcessingDatabase.GetByStatusResult> __Marshaller_ProcessingDatabase_GetByStatusResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ProcessingDatabase.GetByStatusResult.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ProcessingDatabase.UpdateByIDRequest> __Marshaller_ProcessingDatabase_UpdateByIDRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ProcessingDatabase.UpdateByIDRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ProcessingDatabase.UpdateByIDResult> __Marshaller_ProcessingDatabase_UpdateByIDResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ProcessingDatabase.UpdateByIDResult.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ProcessingDatabase.InsertRequest, global::ProcessingDatabase.InsertResult> __Method_Insert = new grpc::Method<global::ProcessingDatabase.InsertRequest, global::ProcessingDatabase.InsertResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Insert",
        __Marshaller_ProcessingDatabase_InsertRequest,
        __Marshaller_ProcessingDatabase_InsertResult);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FileExchange.FileData, global::FileExchange.UploadStatus> __Method_ImportCSV = new grpc::Method<global::FileExchange.FileData, global::FileExchange.UploadStatus>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "ImportCSV",
        __Marshaller_FileExchange_FileData,
        __Marshaller_FileExchange_UploadStatus);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ProcessingDatabase.GetByStatusRequest, global::ProcessingDatabase.GetByStatusResult> __Method_GetByStatus = new grpc::Method<global::ProcessingDatabase.GetByStatusRequest, global::ProcessingDatabase.GetByStatusResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetByStatus",
        __Marshaller_ProcessingDatabase_GetByStatusRequest,
        __Marshaller_ProcessingDatabase_GetByStatusResult);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ProcessingDatabase.UpdateByIDRequest, global::ProcessingDatabase.UpdateByIDResult> __Method_UpdateByID = new grpc::Method<global::ProcessingDatabase.UpdateByIDRequest, global::ProcessingDatabase.UpdateByIDResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateByID",
        __Marshaller_ProcessingDatabase_UpdateByIDRequest,
        __Marshaller_ProcessingDatabase_UpdateByIDResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ProcessingDatabase.ProcessingdatabaseReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ProcessingDatabase</summary>
    [grpc::BindServiceMethod(typeof(ProcessingDatabase), "BindService")]
    public abstract partial class ProcessingDatabaseBase
    {
      /// <summary>
      /// Inserts data into a table, allowed only for scrapper
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ProcessingDatabase.InsertResult> Insert(global::ProcessingDatabase.InsertRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::FileExchange.UploadStatus> ImportCSV(grpc::IAsyncStreamReader<global::FileExchange.FileData> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Getting data by status, allowed only for preprocessor and processor
      /// For preprocessor allowed status is only NEW, for processor allowed NEW and PREPROCESSED (depends on processor posibilities) status
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ProcessingDatabase.GetByStatusResult> GetByStatus(global::ProcessingDatabase.GetByStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updating data after preprocessing or processing, status will be updated automatically
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ProcessingDatabase.UpdateByIDResult> UpdateByID(global::ProcessingDatabase.UpdateByIDRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ProcessingDatabaseBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Insert, serviceImpl.Insert)
          .AddMethod(__Method_ImportCSV, serviceImpl.ImportCSV)
          .AddMethod(__Method_GetByStatus, serviceImpl.GetByStatus)
          .AddMethod(__Method_UpdateByID, serviceImpl.UpdateByID).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ProcessingDatabaseBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Insert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ProcessingDatabase.InsertRequest, global::ProcessingDatabase.InsertResult>(serviceImpl.Insert));
      serviceBinder.AddMethod(__Method_ImportCSV, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::FileExchange.FileData, global::FileExchange.UploadStatus>(serviceImpl.ImportCSV));
      serviceBinder.AddMethod(__Method_GetByStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ProcessingDatabase.GetByStatusRequest, global::ProcessingDatabase.GetByStatusResult>(serviceImpl.GetByStatus));
      serviceBinder.AddMethod(__Method_UpdateByID, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ProcessingDatabase.UpdateByIDRequest, global::ProcessingDatabase.UpdateByIDResult>(serviceImpl.UpdateByID));
    }

  }
  /// <summary>
  /// === Сервис для взаимодействия с нейронной сетью ===
  /// </summary>
  public static partial class ImageEmbeddingService
  {
    static readonly string __ServiceName = "ProcessingDatabase.ImageEmbeddingService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ProcessingDatabase.EmbeddingRequest> __Marshaller_ProcessingDatabase_EmbeddingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ProcessingDatabase.EmbeddingRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ProcessingDatabase.EmbeddingResponse> __Marshaller_ProcessingDatabase_EmbeddingResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ProcessingDatabase.EmbeddingResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ProcessingDatabase.EmbeddingRequest, global::ProcessingDatabase.EmbeddingResponse> __Method_ProcessImage = new grpc::Method<global::ProcessingDatabase.EmbeddingRequest, global::ProcessingDatabase.EmbeddingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ProcessImage",
        __Marshaller_ProcessingDatabase_EmbeddingRequest,
        __Marshaller_ProcessingDatabase_EmbeddingResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ProcessingDatabase.ProcessingdatabaseReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of ImageEmbeddingService</summary>
    [grpc::BindServiceMethod(typeof(ImageEmbeddingService), "BindService")]
    public abstract partial class ImageEmbeddingServiceBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ProcessingDatabase.EmbeddingResponse> ProcessImage(global::ProcessingDatabase.EmbeddingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ImageEmbeddingServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ProcessImage, serviceImpl.ProcessImage).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ImageEmbeddingServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ProcessImage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ProcessingDatabase.EmbeddingRequest, global::ProcessingDatabase.EmbeddingResponse>(serviceImpl.ProcessImage));
    }

  }
}
#endregion
